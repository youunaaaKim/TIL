# 늑대 무리가 마을을 습격하기 시작했고, 김씨의 허술한 외양간들이 차례로 공격받기 시작
# 한 번이라도 공격받은 외양간은 방어에 취약해져, 수리하기 전까지 매일 밤 일정 수의 소를 잃게 됩니다.
# 한 번에 한 외양간만 수리 가능
# 총 M일간 늑대의 습격이 예정되어 있을 때, 총 피해를 최소화 하는 외양간 수리 순서 구하기
# 문제 설명
# 1.  N개의 외양간이 있으며, 각 외양간 "i"는 다음과 같은 정보를 가집니다.
#       * 일일 손실량 ("Li"): 한 번 공격받은 후, 수리가 완료되기 전까지 매일 밤 잃게 되는 소의 마릿수입니다.
#       * 수리 기간 ("Di"): 해당 외양간을 수리하는 데 걸리는 기간(일)입니다.
# 2.  총 M일 동안 매일 밤, 늑대는 정해진 순서에 따라 단 하나의 외양간을 공격합니다.
#       * '취약 상태가 아닌' 외양간만 공격 대상이 됩니다.
#       * "d"번째 날 밤에 "Ad"번 외양간이 공격당하면, 해당 외양간은 그날 밤부터 '취약 상태'가 됩니다.
# 3.  농부는 다음 날 아침부터 수리를 시작할 수 있습니다.
#       * 농부는 아침에 '취약 상태'인 외양간 중 하나를 골라 수리를 시작할 수 있습니다.
#       * 만약 다른 외양간을 수리하는 중이라면, 새로운 수리를 시작할 수 없습니다.
#       * "i"번 외양간의 수리를 시작하면 "Di"일 동안 수리가 진행되며, "Di"일이 지난 다음 날 아침부터 다른 외양간 수리를 시작할 수 있습니다.
# 4.  손실 계산:
#       * 총 손실은 M일 동안 매일 밤 발생하는 손실의 총합입니다.
#       * "d"번째 날 밤의 손실은, 그날 밤 '취약 상태'에 있는 모든 외양간들의 "Li" 값을 합한 것입니다.
#       * 외양간이 공격받은 그날 밤부터 손실이 발생하기 시작합니다.
#       * 외양간 수리가 완료되면 (즉, "Di"일이 모두 지나면) 그날 밤부터는 더 이상 소를 잃지 않습니다.
# 5.  취약 상태인 외양간이 1개라도 있다면, 곧바로 수리를 시작해야 합니다.
#       * 수리를 하지 않고, 다음 공격을 "대기" 할 수는 없습니다.

# 주어진 입력 예시 상황을 차례대로 진행하면 다음과 같이 진행됩니다.
#   * 1일차 밤: 2번 외양간 공격.
#       * 취약 상태: {2}
#       * 오늘 밤 손실: L2 = 8
#       * 누적 손실: 8
#   * 2일차 아침: 농부는 수리를 시작할 수 있습니다. 현재 취약 상태는 {2}뿐이므로 2번 수리 시작. (수리 기간 1일)
#   * 2일차 밤: 1번 외양간 공격.
#       * 취약 상태: {1, 2} (2번은 아직 수리 중)
#       * 오늘 밤 손실: L1 + L2 = 10 + 8 = 18
#       * 누적 손실: 8 + 18 = 26
#   * 3일차 아침: 2번 외양간 수리 완료. 이제 새로운 수리 가능.
#       * 현재 취약 상태는 {1}. 농부는 1번 수리 시작. (수리 기간 2일)
#   * 3일차 밤: 3번 외양간 공격.
#       * 취약 상태: {1, 3} (1번은 아직 수리 중)
#       * 오늘 밤 손실: L1 + L3 = 10 + 5 = 15
#       * 누적 손실: 26 + 15 = 41
# 목표: M일간 발생하는 소의 총 손실을 최소화하는 값을 출력하세요.
# 입력 형식
#   * 첫 번째 줄: 테스트 케이스의 수 T
#   * 각 테스트 케이스의 첫 번째 줄: 외양간의 수 N, 총 기간 M (1 ≤ N, M ≤ 50)
#   * 다음 N개의 줄: 각 외양간의 일일 손실량 Li와 수리 기간 Di (1 ≤ Li, Di ≤ 25)
#   * 다음 M개의 줄: d번째 날 밤에 공격받는 외양간의 번호 Ad (1 ≤ Ad ≤ N)
# 출력 형식
#   * "#t" (테스트케이스 번호)와 공백을 두고 최소 총 손실량을 출력합니다.

import sys
sys.stdin = open('cow_input.txt')
T = int(input())  # 테스트 케이스 수
for tc in range(1, T + 1):
    N, M = map(int, input().split())  # 외양간 수 N , 늑대가 공격하는 일 수 M
    barns = []

    for _ in range(N):
        L, D = map(int, input().split())  # 각 외양간의 손실량 L, 수리기간 D
        barns.append({'L': L, 'D': D})

    attacks = []
    for _ in range(M):
        A = int(input()) - 1  # 외양간 번호
        attacks.append(A)

    # 디버그 출력 (필요하면)
    print(f"Test Case #{tc}")
    print("Barns:", barns)
    print("Attacks:", attacks)




